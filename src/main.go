package main

import (
	"awesomeProject/src/accumulator/rsaAccumulator"
	"awesomeProject/src/utils/pair"
	"awesomeProject/src/utils/util"
	"bufio"
	"fmt"
	"io"
	"math/big"
	"math/rand"
	"os"
	"sort"
	"time"
)

type RsaStruct struct {
	RsaAcc rsaAccumulator.RSAAccumulator `json:"rsa_acc"`
	RsaId  string
	RsaValue *big.Int
	Rsalist []string
}

func main()  {
	pair := pair.NewPair(256)
	var q = new(big.Int)
	q.Mul(pair.GetFirst(), pair.GetSecond())
	rand.Seed(time.Now().UnixNano())

	//Pedersen承诺
	start:=time.Now()
	r := big.NewInt(int64(rand.Intn(2000)))
	pcf := big.NewInt(179)
	g := util.GenerateRandomNumber(*big.NewInt(0), *q)
	h := util.GenerateRandomNumber(*big.NewInt(0), *q)
	g.Exp(g,pcf,nil)
	h.Exp(h,r,nil)
	g.Mul(g,h)
	compare := g.Mod(g,q)
	fmt.Println("dian",compare)
	compare1:=compare
	compare1.Cmp(compare)
	fmt.Println(time.Since(start))

	//result := RsaStruct{
	//	rsaAccumulator.RSAAccumulator{},
	//	"asd",
	//	big.NewInt(0),
	//	[]string{},
	//}
	//total,err := json.Marshal(result)
	//var resultfinal RsaStruct
	//if err == nil{
	//	err1 := json.Unmarshal(total,&resultfinal)
	//	if err1 == nil{
	//		fmt.Println(resultfinal)
	//	} else{
	//		fmt.Println("unmarshal失败")
	//	}
	//} else{
	//	fmt.Println("marshal失败")
	//}


	//test()
	//rsa生成密钥测试
	//privateKey, err := rsa.GenerateKey(rand.Reader, 12)
	//if err!=nil {
	//	fmt.Println(err)
	//}
	//fmt.Println(privateKey)

	//贝祖系数计算测试
	//a := big.NewInt(7)
	//b := big.NewInt(165)
	//x,y := util.Bezoute_Coefficients(*a,*b)
	//fmt.Printf("x[%s],y[%s]\n",x.String(),y.String())

	//test mul_inv
	//A,_:=new(big.Int).SetString("815194238242234488162635318818338286685308701019223796352007418855861295702280713663554262457274239882781852114867235000462739655781252806149508223609408992173241003652318257317361996769379650749770346677340850004381388847248976104280797092422076277252367410840458482993852348765995091291693224767504907540512550511588944941757940576745699092782582689016846484216070143240494137427541525187957179662981806927484934997701616454525437729020150897421508604949734306845275601978747190407972579913801288712706232231170871876556128900228108640015266520318085802305789536880980433197066171205997265401700100168510686443604158973156315993793678786278729484326892987824707966825746915126994730192535119984089449744138627655126536198382645248722244979918609487517978304733350018339404183080578606883644414396017309076812816751574157181870448979049791437531148487005617559808893481868400134990210560594807512715772192363476343276254691",10)
	//n,_:=new(big.Int).SetString("2515403953531175980797175796532479815289779837566742311450223241785930945905080615630663073885571335544032202053806359879045352805870986413891889073070077664889724725158489897593374327545584339836533113757264988716634323448175272508541206891425338940411078379904565113853104883884344388906721537904030213963282675949905984521490863314270697146826025229549340174435675317056421819002397431230251106908392345514911005751250466358003035614371005474903522117893497665272614772013183374918645211054065107679079152517967472755064014438033548270087860301926252887905872084502368250720475568739088692635946964674251852861347999629138616227582807784256464682285784450774910519714020431290497840794473210523897411529218190081175750823130890990683379865931778975023999855312696263437331428971808552189737617036526405643287049993184180029725022751896634590774840971666982770522375122062799127728268192848797533289214062043899384648567901",10)
	//a,_:=new(big.Int).SetString("823796730489854006618589605930489653996098116639952475883828623707413589885834122541294065506259407607716717530036",10)
	//fmt.Println(A)
	//fmt.Println(n)
	//str := n.String()
	//computeN,_ := new(big.Int).SetString(str,10)
	//inverseA := util.Mul_inv(*A,*n)
	//d := big.NewInt(1)
	//fmt.Println("inverseA:",&inverseA)
	//fmt.Println(a)
	//fmt.Println(n)
	//d.Exp(&inverseA,a,computeN)
	//fmt.Println(d)

	//test乘法运算
	//primes := big.NewInt(1)
	//prime1,_ := new(big.Int).SetString("217923150081178268766967108051354529987",10)
	//prime2,_ := new(big.Int).SetString("215956918520663888376144572820213169699",10)
	//prime3,_ := new(big.Int).SetString("273294556485267517590953466847894459711",10)
	//primes.Mul(primes,prime1)
	//primes.Mul(primes,prime2)
	//primes.Mul(primes,prime3)
	//fmt.Println("primes",primes)
	//x_prime,_ := new(big.Int).SetString("283944378362685691584601964530389507713",10)
	//a,b:=util.Bezoute_Coefficients(*x_prime,*primes)
	//fmt.Println("a:",&a)
	//fmt.Println("b:",&b)
	//n,_:=new(big.Int).SetString("85557921997677748192643144828987196451229000439623728301360672585675179505261019780953021701445474290463675255682025895120428622626403011331494142448431468758678048604364085649495393923504276389660623602139700821775197790790242762488512651861569992625409774985570706468040998475667971136526461650803594824091708147611218414942657236875910036224314499420883807595031902650027567483343415316554947109544079740668669923663968098232237495076641383866858753324421498737175517923753676030955064293486454838968948200225468865052369055816434841874835306716532726726732989155612604092146357670032731613389788352803491812595434425484016076194781868714240410605791340190640207013516006443138938231285510384054134276382620957971290435925973596426483041346324637487246803193916995249148682813922895689305950834018917299839513839287941789166796584234165890924427103366260721645738270297940871222614108673866147704861483889720575570417847",10)
	//A0,_:=new(big.Int).SetString("51029865746006306202548887562451744936782866334513341065597812770543333019754892460277663240238817158465604020919214922501430870914325148774708861207398936105934807914185574504171852178310614191160772199336994431476677278219033320997488445912984049776973522564469882063837040216625366009846656358524901509865812994944345607563520500192427339451108988456700336915759387349921398812619459909772947404361764854339330409749757177126715154066193699369234850437773164204453263485535933050505122282991820469502331104661049615161702691189749243705429737336273683214596713986832940565010897696100965818224695782427749639102101279580424699930411166600257896626387572411415021168810147590867013218514335916598746398620824905337087156778794371799673628053131979961025234831143833753065263163046397060141134031093135692640278228382629833021374789146989618786713208196528537901170286186236854123867553621935147299013890495926565734781153",10)
	//a.Abs(&a)
	//str := n.String()
	//computeN,_ := new(big.Int).SetString(str,10)
	//inverse_A0 := util.Mul_inv(*A0,*n)
	//d := big.NewInt(1)
	//d.Exp(&inverse_A0,&a,computeN)
	//fmt.Println("d",d)

	//test hash265
	//prime,x_nonce := util.HashToPrime1(big.NewInt(3),128,0)
	//fmt.Println("prime3:",prime)
	//fmt.Println("x_nonce3",x_nonce)
	//
	//prime,x_nonce = util.HashToPrime1(big.NewInt(5),128,0)
	//fmt.Println("prime5:",prime)
	//fmt.Println("x_nonce5",x_nonce)

	//test VerifyNonMembership
	//acc := rsaAccumulator.New()
	//fmt.Println(acc.GetA0())
	//fmt.Println(acc.GetA())
	//acc.AddMember("3")
	//acc.AddMember("5")
	//acc.AddMember("11")
	//fmt.Println(acc.GetA0())
	//fmt.Println(acc.GetA())
	//B := acc.ProveNonmembership(*acc.GetA0(),[]string{"3","5","11"},"7",*acc.GetN())
	//B.A,_ = new(big.Int).SetString("419949143306452158410236818269080236816219027968877201705933020130575417549436463210842754172094922351615927791820611258154860983775454705069009562724282803870104193934318099377890286517044645205604597608290883426333595484112042870866368101342621340250944188858573509241366113961540214433052133553203464606905195635759066670964720046742718426299645894779158135263258489448414902657619830559804606946133045700093681395355074354760818179310228292789170732105201261651056985567117815053897726843339187320241568377520184472576910357998020433801574304759225130670437444109693288889892751168704390969730481189502968805449170591482076615270287721686610758741528305353022379869154431061074239492708453097408037345237385982924581778705945381233753070958881003488410830320161952400919090801367716146305470961165172426969230662635249127970986402487535659525653432352347937361583046408507018971190267715031620880190618210926945506519165",10)
	//B.B,_ = new(big.Int).SetString("27194966326006264737889108609028367031",10)
	//A0,_ := new(big.Int).SetString("815194238242234488162635318818338286685308701019223796352007418855861295702280713663554262457274239882781852114867235000462739655781252806149508223609408992173241003652318257317361996769379650749770346677340850004381388847248976104280797092422076277252367410840458482993852348765995091291693224767504907540512550511588944941757940576745699092782582689016846484216070143240494137427541525187957179662981806927484934997701616454525437729020150897421508604949734306845275601978747190407972579913801288712706232231170871876556128900228108640015266520318085802305789536880980433197066171205997265401700100168510686443604158973156315993793678786278729484326892987824707966825746915126994730192535119984089449744138627655126536198382645248722244979918609487517978304733350018339404183080578606883644414396017309076812816751574157181870448979049791437531148487005617559808893481868400134990210560594807512715772192363476343276254691",10)
	//A3,_ := new(big.Int).SetString("1849461054741044214397433179888648006542016635324921124440034437455183614444205140923901315356475319559469102888761299566138697572964840960643123544190341861492414023737627805145253268050751213321017515603167382215517179049417928233839129437517201139777367227774563005764826758085010247147793321682800625448400441365353568627795679508091830641917416303039428184430897450173507973047654435556300519550839249064592194422501491765772958006184529697824722928954968479882665863593371682706175959378283339109893053866971484496074642141131682507236362984969649877002172324128176554158600937924366201368034907138885226616684385857080374289362089350795241048090287480489978173516626671628774599442166383699323168904032268122090100311491636420368137668254485610750093640197720091819691553915240783430504459785308039821753478385791111360219097235283586810046807913648679767082575064643292558202750805009649379926454922754230803652232585",10)
	//x := "34391675467532162742298711352538992988699161308872591714423339291055689019915"
	//n,_ := new(big.Int).SetString("2515403953531175980797175796532479815289779837566742311450223241785930945905080615630663073885571335544032202053806359879045352805870986413891889073070077664889724725158489897593374327545584339836533113757264988716634323448175272508541206891425338940411078379904565113853104883884344388906721537904030213963282675949905984521490863314270697146826025229549340174435675317056421819002397431230251106908392345514911005751250466358003035614371005474903522117893497665272614772013183374918645211054065107679079152517967472755064014438033548270087860301926252887905872084502368250720475568739088692635946964674251852861347999629138616227582807784256464682285784450774910519714020431290497840794473210523897411529218190081175750823130890990683379865931778975023999855312696263437331428971808552189737617036526405643287049993184180029725022751896634590774840971666982770522375122062799127728268192848797533289214062043899384648567901",10)
	//acc.VerifyNonMembership(*A0,*A3,B,x,*n)
	//test non-membership-witness
	acc := rsaAccumulator.New()
	fmt.Println("累加器初始化的状态值：",acc.GetA())
	//start := time.Now()
	//util.HashToPrime("结构厂")
	//fmt.Println(time.Since(start))
	//var collection []string
	////for i:=0;i<1000;i++ {
	////	str := strconv.Itoa(i)
	////	start = time.Now()
	////	//util.HashToPrime("-----BEGIN CERTIFICATE-----\nMIIDmjCCAoKgAwIBAgIIO+ZSsAlamrcwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UE\nBhMCQ04xCzAJBgNVBAgTAkJKMQswCQYDVQQHEwJCSjENMAsGA1UEChMEQkpVVDEL\nMAkGA1UECxMCU0UxEDAOBgNVBAMTB3Rlc3R1ZXIwHhcNMjEwNDE5MDczNzMxWhcN\nNDEwNDE5MDczNzMxWjBnMQswCQYDVQQGEwJDTjELMAkGA1UECBMCQkoxCzAJBgNV\nBAcTAkJKMQ0wCwYDVQQKEwRCSlVUMQswCQYDVQQLEwJTRTEQMA4GA1UEAxMHdGVz\ndHVlcjEQMA4GAlEDDAhNQUNfQUREUjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\nAQoCggEBAPX924MHV1jLxBD2dluu1M0aCOxqp/44WIjRsx29bAo0avxqEINv80hy\ndxxuctfKRYJRKRzwGOyt0y7jH+NT/Ik8Mu4K2pQnvGtw/95+DKRjAZadNwP12cwE\nyoCuv4kAFo8iviM/5G+0YcZCPTM7w4h+T1ktWVwGPoPwMwP4qQ7OkYZmdzf6sUY1\nEsIT5vsUBoT2S6jwJcvDgNGJeumFVILUqrpFhustbzgpnAemwXA7X+dXJbpBovwS\n1oevpQUVzve2b7MFLZr7d0IJzGW+AfHi1jsmS9esF2tH6cjj8wBkAJBCntMommTW\ne/XBffLKrNvK1TwRryz9WnH2JLTHns0CAwEAAaNcMFowDgYDVR0PAQH/BAQDAgKE\nMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAMBgNVHRMBAf8EAjAAMBsG\nA1UdEQQUMBKBEDc1MTU3OTA3NkBxcS5jb20wDQYJKoZIhvcNAQELBQADggEBAM0t\nQXF2EKOZWk3thmq3UyrPisAY1R5dSgw/Ae4pxDB7i2NfRi/Nsq7Wzaspz4JgAVfs\nNv57cNQtBaAk8Wuo6zNfdiumJ2CiDsDfGalSVR53u3cODVkW+WCTt+8m1qohYRQU\nw8mPRwNAUXDTb0OnEHWFr3/ixSXTbUJyI+G5eaiz2XiTxnizzYX2dVBDiez6RbDA\nAxpwX51P5Fe88gIHJ+l7OBtf6va1X/Iy2ocazOhCfrKegIP1J5ByqVLajlXnffIX\nqKBxnjuzxJ17ARiDjNTe5E49T8ItsnNjh3EnhTdZXdNdsokOkX5BadDRFGvyswF7\nTNTCm57+giovYGcXKPQ=\n-----END CERTIFICATE-----")
	////	fmt.Println(time.Since(start))
	////	collection = append(collection, str)
	////}
	//for i:=0;i<500;i++ {
	//	//acc = rsaAccumulator.New()
	//	str := strconv.Itoa(i)
	//	start = time.Now()
	//	//acc.AddMember("-----BEGIN CERTIFICATE-----\nMIIDmjCCAoKgAwIBAgIIO+ZSsAlamrcwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UE\nBhMCQ04xCzAJBgNVBAgTAkJKMQswCQYDVQQHEwJCSjENMAsGA1UEChMEQkpVVDEL\nMAkGA1UECxMCU0UxEDAOBgNVBAMTB3Rlc3R1ZXIwHhcNMjEwNDE5MDczNzMxWhcN\nNDEwNDE5MDczNzMxWjBnMQswCQYDVQQGEwJDTjELMAkGA1UECBMCQkoxCzAJBgNV\nBAcTAkJKMQ0wCwYDVQQKEwRCSlVUMQswCQYDVQQLEwJTRTEQMA4GA1UEAxMHdGVz\ndHVlcjEQMA4GAlEDDAhNQUNfQUREUjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\nAQoCggEBAPX924MHV1jLxBD2dluu1M0aCOxqp/44WIjRsx29bAo0avxqEINv80hy\ndxxuctfKRYJRKRzwGOyt0y7jH+NT/Ik8Mu4K2pQnvGtw/95+DKRjAZadNwP12cwE\nyoCuv4kAFo8iviM/5G+0YcZCPTM7w4h+T1ktWVwGPoPwMwP4qQ7OkYZmdzf6sUY1\nEsIT5vsUBoT2S6jwJcvDgNGJeumFVILUqrpFhustbzgpnAemwXA7X+dXJbpBovwS\n1oevpQUVzve2b7MFLZr7d0IJzGW+AfHi1jsmS9esF2tH6cjj8wBkAJBCntMommTW\ne/XBffLKrNvK1TwRryz9WnH2JLTHns0CAwEAAaNcMFowDgYDVR0PAQH/BAQDAgKE\nMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAMBgNVHRMBAf8EAjAAMBsG\nA1UdEQQUMBKBEDc1MTU3OTA3NkBxcS5jb20wDQYJKoZIhvcNAQELBQADggEBAM0t\nQXF2EKOZWk3thmq3UyrPisAY1R5dSgw/Ae4pxDB7i2NfRi/Nsq7Wzaspz4JgAVfs\nNv57cNQtBaAk8Wuo6zNfdiumJ2CiDsDfGalSVR53u3cODVkW+WCTt+8m1qohYRQU\nw8mPRwNAUXDTb0OnEHWFr3/ixSXTbUJyI+G5eaiz2XiTxnizzYX2dVBDiez6RbDA\nAxpwX51P5Fe88gIHJ+l7OBtf6va1X/Iy2ocazOhCfrKegIP1J5ByqVLajlXnffIX\nqKBxnjuzxJ17ARiDjNTe5E49T8ItsnNjh3EnhTdZXdNdsokOkX5BadDRFGvyswF7\nTNTCm57+giovYGcXKPQ=\n-----END CERTIFICATE-----")
	//	//util.HashToPrime("-----BEGIN CERTIFICATE-----\nMIIDmjCCAoKgAwIBAgIIO+ZSsAlamrcwDQYJKoZIhvcNAQELBQAwVTELMAkGA1UE\nBhMCQ04xCzAJBgNVBAgTAkJKMQswCQYDVQQHEwJCSjENMAsGA1UEChMEQkpVVDEL\nMAkGA1UECxMCU0UxEDAOBgNVBAMTB3Rlc3R1ZXIwHhcNMjEwNDE5MDczNzMxWhcN\nNDEwNDE5MDczNzMxWjBnMQswCQYDVQQGEwJDTjELMAkGA1UECBMCQkoxCzAJBgNV\nBAcTAkJKMQ0wCwYDVQQKEwRCSlVUMQswCQYDVQQLEwJTRTEQMA4GA1UEAxMHdGVz\ndHVlcjEQMA4GAlEDDAhNQUNfQUREUjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\nAQoCggEBAPX924MHV1jLxBD2dluu1M0aCOxqp/44WIjRsx29bAo0avxqEINv80hy\ndxxuctfKRYJRKRzwGOyt0y7jH+NT/Ik8Mu4K2pQnvGtw/95+DKRjAZadNwP12cwE\nyoCuv4kAFo8iviM/5G+0YcZCPTM7w4h+T1ktWVwGPoPwMwP4qQ7OkYZmdzf6sUY1\nEsIT5vsUBoT2S6jwJcvDgNGJeumFVILUqrpFhustbzgpnAemwXA7X+dXJbpBovwS\n1oevpQUVzve2b7MFLZr7d0IJzGW+AfHi1jsmS9esF2tH6cjj8wBkAJBCntMommTW\ne/XBffLKrNvK1TwRryz9WnH2JLTHns0CAwEAAaNcMFowDgYDVR0PAQH/BAQDAgKE\nMB0GA1UdJQQWMBQGCCsGAQUFBwMCBggrBgEFBQcDATAMBgNVHRMBAf8EAjAAMBsG\nA1UdEQQUMBKBEDc1MTU3OTA3NkBxcS5jb20wDQYJKoZIhvcNAQELBQADggEBAM0t\nQXF2EKOZWk3thmq3UyrPisAY1R5dSgw/Ae4pxDB7i2NfRi/Nsq7Wzaspz4JgAVfs\nNv57cNQtBaAk8Wuo6zNfdiumJ2CiDsDfGalSVR53u3cODVkW+WCTt+8m1qohYRQU\nw8mPRwNAUXDTb0OnEHWFr3/ixSXTbUJyI+G5eaiz2XiTxnizzYX2dVBDiez6RbDA\nAxpwX51P5Fe88gIHJ+l7OBtf6va1X/Iy2ocazOhCfrKegIP1J5ByqVLajlXnffIX\nqKBxnjuzxJ17ARiDjNTe5E49T8ItsnNjh3EnhTdZXdNdsokOkX5BadDRFGvyswF7\nTNTCm57+giovYGcXKPQ=\n-----END CERTIFICATE-----")
	//	fmt.Println(time.Since(start))
	//	acc.AddMember(str)
	//	collection = append(collection, str)
	//}
	//fmt.Println(collection)
	acc.AddMember("原材料供应商（原料提供）")
	acc.AddMember("零部件供应商（加工）")
	acc.AddMember("零部件供应商（运输）")
	acc.AddMember("集团（运输）")
	acc.AddMember("集团（加工）")
	//x,_:=new(big.Int).SetString("7",10)
	//prime,x_nonce:=util.HashToPrime(x,128,0)
	//fmt.Println("prime",prime)
	start = time.Now()
	membershipProof:=acc.ProveMembership("集团（运输）")
	membershipProof1:=acc.ProveMembership("集团（加工）")
	fmt.Println("运输成员证明：",membershipProof)
	fmt.Println("加工成员证明：",membershipProof1)
	fmt.Println(time.Since(start))
	start = time.Now()
	if (acc.VerifyMembership("集团（加工）",membershipProof)) {
		fmt.Println("成员验证成功")
	}
	fmt.Println("成员验证：",time.Since(start))
	start = time.Now()
	NonmembershipProof := acc.ProveNonmembership(*acc.GetA0(),[]string{"原材料供应商（原料提供）","集团（运输）","集团（加工）","零部件供应商（加工）","零部件供应商（运输）"},"原材料供应商01（原料提供）",*acc.GetN())
	fmt.Println("当前累加器状态：",acc.GetA())
	fmt.Println("非成员证明：",NonmembershipProof)
	fmt.Println(time.Since(start))
	//fmt.Println("非成员证明proof:")
	//fmt.Println(NonmembershipProof.A)
	//fmt.Println(NonmembershipProof.B)
	start = time.Now()
	acc.VerifyNonMembership(*acc.GetA0(),*acc.GetA(),NonmembershipProof,"原材料供应商01（原料提供）",*acc.GetN())
	fmt.Println(time.Since(start))
	//fmt.Println(B)
	//test verify non-membership-witness

	//crtStr := readCert("testCert.pem")
	//crtStr2 := readCert("test_server.crt")
	//test := rsaAccumulator.New()
	//fmt.Println("A:"+test.GetA().String())
	//fmt.Println("A0:"+test.GetA0().String())
	//test.AddMember(crtStr)
	//crt1_proof := test.ProveMembership(crtStr)
	//fmt.Println("Crt1Proof:"+crt1_proof.String())
	//fmt.Println("A:"+test.GetA().String())
	//test.AddMember(crtStr2)
	//fmt.Println("A:"+test.GetA().String())
	//var test1 = new(big.Int)
	//test1.Mod(a,b)



	//贝祖
	//a:=big.NewInt(7)
	//b:=big.NewInt(1105)
	//x1,y1 := util.Bezoute_Coefficients(*a,*b)
	//fmt.Println(b)
	//fmt.Println(a)
	//fmt.Println("x1",x1)
	//fmt.Println("y1",y1)
	//temp1 := big.NewInt(1)
	//temp1.Mul(&x1,big.NewInt(7))
	//temp2 := big.NewInt(1)
	//temp2.Mul(&y1,big.NewInt(1105))
	//fmt.Println("temp1:",temp1)
	//fmt.Println("temp2:",temp2)
	//fmt.Printf("x[%d],y[%d]\n",x1,y1)


	//start := time.Now()
	//fmt.Println(time.Since(start))
	//fmt.Println(time.Since(start))
}

func readCert(fileName string)string{
	//以文本形式读取文件取
	file, err := os.Open(fileName)
	if err != nil {
		fmt.Println("文件打开失败 = ", err)
	}
	//及时关闭 file 句柄，否则会有内存泄漏
	defer file.Close()
	crtStr := ""
	//创建一个 *Reader ， 是带缓冲的
	reader := bufio.NewReader(file)
	for {
		str, err := reader.ReadString('\n') //读到一个换行就结束
		if err == io.EOF {                  //io.EOF 表示文件的末尾
			break
		}
		crtStr += str
		//fmt.Print(str)
	}
	fmt.Println(crtStr)
	fmt.Println("文件读取结束...")
	return crtStr
}

func test(){
	//var list []*big.Int
	//a := big.NewInt(3)
	//list = append(list,a)
	//fmt.Println(list)
	test := rsaAccumulator.New()
	fmt.Println("A:"+test.GetA().String())
	fmt.Println("A0:"+test.GetA0().String())
	fmt.Println("N:"+test.GetN().String())
	N := test.GetN()
	dict := make(map[string]int)
	fmt.Printf("累加器状态:%s\n",test.GetA().String())
	test.AddMember("37")
	test.AddMember("59")
	test.AddMember("73")
	test.AddMember("117")
	dict["37"]=test.GetVal("37")
	dict["59"]=test.GetVal("59")
	dict["73"]=test.GetVal("73")
	dict["117"]=test.GetVal("117")

	fmt.Println(dict)
	//var primes []*big.Int
	//primes = append(primes, big.NewInt(3))
	//primes = append(primes, big.NewInt(5))
	//primes = append(primes, big.NewInt(7))
	//primes = append(primes, big.NewInt(11))
	//result :=util.Root_factor(big.NewInt(2),primes,N)
	//fmt.Println(result)

	witnesses := util.Create_all_membership_witness(test.GetA0(),dict,N)
	fmt.Printf("累加器状态:%s\n",test.GetA().String())
	fmt.Println(witnesses)
	fmt.Println(witnesses)
	fmt.Println(witnesses)
	fmt.Println("37的素数hash值：")
	fmt.Println(util.HashToPrime("37"))
	sorted_keys := make([]string, 0)
	for k, _ := range dict {
		sorted_keys = append(sorted_keys, k)
	}
	sort.Strings(sorted_keys)
	var index = 0
	for k,v := range sorted_keys{
		if v=="37"{
			index=k
		}
	}
	fmt.Println(test.VerifyMembership("37",witnesses[index]))

}
